# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import asyncio
from traceback import format_exc
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIntValidator
from PyQt5.QtWidgets import QMessageBox
from qasync import QEventLoop
import numpy as np
import time

from live_danmuku_async import Danmuku


LOTTERY_INTERVAL_MIN = 10
LOTTERY_INTERVAL_MAX = 250
LOTTERY_INTERVAL_INC = 5


class Ui_MainWindow(object):

    # === Core logic code goes here ===
    def __init__(self, main_window):
        super(Ui_MainWindow, self).__init__()
        self.main_window = main_window
        # Input validator
        self.onlyInt = QIntValidator()
        # Danmuku
        self.danmuku = Danmuku()
        # Qt thread for live danmu monitoring
        self.thread = None

    # Setup widget signal functions and other related pre-processing
    def setup_signal(self):
        # Enable/disable danmu filter lineEdit widget when the corresponding checkbox state changes
        self.checkBox_paizi.toggled.connect(lambda: self.lineEdit_paizi.setEnabled(self.checkBox_paizi.isChecked()))
        self.checkBox_keyword.toggled.connect(lambda: self.lineEdit_keyword.setEnabled(self.checkBox_keyword.isChecked()))
        # Setup lottery button signal
        self.pushButton_lottery.clicked.connect(self.lottery_button_on_click)
        # Setup input lineEdit validators
        # room_id lineEdit only allow integer input
        self.lineEdit_room_id.setValidator(self.onlyInt)

    # Main lottery button events
    def lottery_button_on_click(self):
        # Change button state/text and call corresponding function
        if self.pushButton_lottery.text() == "开始统计":
            # self.pushButton_lottery.setText("结束统计并抽奖")
            self.start_monitor()
        else:
            # self.pushButton_lottery.setText("开始统计")
            # self.start_lottery()
            asyncio.create_task(self.start_lottery())

    # Function for updating the live danmu stats LCDNumber widgets
    def update_lcd(self, num_danmu, num_viewers):
        self.lcdNumber_num_danmu.display(num_danmu)
        self.lcdNumber_num_viewer.display(num_viewers)

    def start_monitor(self):
        """
        Start the live danmu monitoring
        """
        # Rest previous output
        self.update_lcd(0, 0)  # Clear LCD
        self.textBrowser_lottery_result.setText('')   # Clear text display
        # Get input
        # Make sure room_id contains something
        room_id = self.lineEdit_room_id.text()
        if not room_id:
            QMessageBox.critical(self.main_window, "输入错误", "请填写Bilibili直播间房间号！")
            return
        room_id = int(room_id)
        paizi = self.lineEdit_paizi.text().strip()
        keyword = self.lineEdit_keyword.text().strip()

        # # Callback function to change LCD number display
        # def stats_report_func(num_danmu, num_viewers):
        #     self.lcdNumber_num_danmu.display(num_danmu)
        #     self.lcdNumber_num_viewer.display(num_viewers)

        try:
            self.danmuku.start_monitor(self.update_lcd, room_id, paizi, keyword)
        except Exception as e:
            QMessageBox.critical(self.main_window, "连接Bilibili直播服务时出现错误", format_exc())

        # Change button caption at the end
        self.pushButton_lottery.setText("结束统计并抽奖")

    # Async update lottery candidates
    # async def roll_lottery_candidates(self, candidates):
    #     # Disable pushbutton during lottery process
    #     self.pushButton_lottery.setEnabled(False)
    #     for interval_ms in range(LOTTERY_INTERVAL_MIN, LOTTERY_INTERVAL_MAX, LOTTERY_INTERVAL_INC):
    #         self.textBrowser_lottery_result.setText(np.random.choice(candidates))
    #         await asyncio.sleep(interval_ms / 1000)
    #     self.pushButton_lottery.setEnabled(True)

    async def start_lottery(self):
        """
        Stop monitoring and start lottery
        """
        self.pushButton_lottery.setEnabled(False)
        candidates = list(self.danmuku.stop_monitor())

        # The lottery process visualization
        # asyncio.create_task(self.roll_lottery_candidates(candidates))
        self.pushButton_lottery.setEnabled(False)
        for interval_ms in range(LOTTERY_INTERVAL_MIN, LOTTERY_INTERVAL_MAX, LOTTERY_INTERVAL_INC):
            self.textBrowser_lottery_result.setText(np.random.choice(candidates))
            await asyncio.sleep(interval_ms / 1000)

        # Change button name at the end
        self.pushButton_lottery.setEnabled(True)
        self.pushButton_lottery.setText("开始统计")

    # Slot method for showing the lottery process
    def lottery_process(self, viewer_set):
        print(f"DEBUG: lottery_process started! Received viewer set: {viewer_set}")

    # === End logic. Below are UI skeleton code ===

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(557, 649)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMinimumSize(QtCore.QSize(360, 475))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(-1, -1, 0, -1)
        self.verticalLayout.setObjectName("verticalLayout")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setGeometry(QtCore.QRect(10, 20, 51, 21))
        self.label.setObjectName("label")
        self.lineEdit_room_id = QtWidgets.QLineEdit(self.groupBox_2)
        self.lineEdit_room_id.setGeometry(QtCore.QRect(140, 20, 131, 20))
        self.lineEdit_room_id.setObjectName("lineEdit_room_id")
        self.verticalLayout.addWidget(self.groupBox_2)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(2)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setObjectName("groupBox")
        self.checkBox_paizi = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_paizi.setGeometry(QtCore.QRect(20, 30, 71, 21))
        self.checkBox_paizi.setObjectName("checkBox_paizi")
        self.lineEdit_paizi = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_paizi.setEnabled(False)
        self.lineEdit_paizi.setGeometry(QtCore.QRect(140, 30, 131, 19))
        self.lineEdit_paizi.setReadOnly(False)
        self.lineEdit_paizi.setObjectName("lineEdit_paizi")
        self.checkBox_keyword = QtWidgets.QCheckBox(self.groupBox)
        self.checkBox_keyword.setGeometry(QtCore.QRect(20, 60, 101, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(4)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.checkBox_keyword.sizePolicy().hasHeightForWidth())
        self.checkBox_keyword.setSizePolicy(sizePolicy)
        self.checkBox_keyword.setObjectName("checkBox_keyword")
        self.lineEdit_keyword = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_keyword.setEnabled(False)
        self.lineEdit_keyword.setGeometry(QtCore.QRect(140, 60, 131, 19))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(6)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit_keyword.sizePolicy().hasHeightForWidth())
        self.lineEdit_keyword.setSizePolicy(sizePolicy)
        self.lineEdit_keyword.setReadOnly(False)
        self.lineEdit_keyword.setObjectName("lineEdit_keyword")
        self.verticalLayout.addWidget(self.groupBox)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        self.pushButton_lottery = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Maximum, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_lottery.sizePolicy().hasHeightForWidth())
        self.pushButton_lottery.setSizePolicy(sizePolicy)
        self.pushButton_lottery.setObjectName("pushButton_lottery")
        self.horizontalLayout_2.addWidget(self.pushButton_lottery)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(3)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.lcdNumber_num_danmu = QtWidgets.QLCDNumber(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.lcdNumber_num_danmu.sizePolicy().hasHeightForWidth())
        self.lcdNumber_num_danmu.setSizePolicy(sizePolicy)
        self.lcdNumber_num_danmu.setObjectName("lcdNumber_num_danmu")
        self.gridLayout.addWidget(self.lcdNumber_num_danmu, 1, 0, 1, 1)
        self.lcdNumber_num_viewer = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber_num_viewer.setObjectName("lcdNumber_num_viewer")
        self.gridLayout.addWidget(self.lcdNumber_num_viewer, 1, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 1, 1, 1)
        self.verticalLayout_3.addLayout(self.gridLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_2.addWidget(self.label_5)
        self.textBrowser_lottery_result = QtWidgets.QTextBrowser(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(4)
        sizePolicy.setHeightForWidth(self.textBrowser_lottery_result.sizePolicy().hasHeightForWidth())
        self.textBrowser_lottery_result.setSizePolicy(sizePolicy)
        self.textBrowser_lottery_result.setObjectName("textBrowser_lottery_result")
        self.verticalLayout_2.addWidget(self.textBrowser_lottery_result)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(1)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        self.label_4.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_2.addWidget(self.label_4)
        self.verticalLayout_3.addLayout(self.verticalLayout_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Bilibili 弹幕抽奖姬"))
        self.label.setText(_translate("MainWindow", "房间号："))
        self.groupBox.setTitle(_translate("MainWindow", "弹幕筛选"))
        self.checkBox_paizi.setText(_translate("MainWindow", "带牌子："))
        self.checkBox_keyword.setText(_translate("MainWindow", "包含以下关键词："))
        self.pushButton_lottery.setText(_translate("MainWindow", "开始统计"))
        self.label_2.setText(_translate("MainWindow", "弹幕数量："))
        self.label_3.setText(_translate("MainWindow", "观众数量："))
        self.label_5.setText(_translate("MainWindow", "抽奖结果："))
        self.label_4.setText(_translate("MainWindow", "by 养猫的小天使喵"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)

    # Setup application async event loop
    loop = QEventLoop(app)
    asyncio.set_event_loop(loop)
    asyncio.events._set_running_loop(loop)

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(MainWindow)
    ui.setupUi(MainWindow)
    ui.setup_signal()  # Setup widget signal functions
    MainWindow.show()

    with loop:
        loop.run_forever()

    sys.exit(app.exec_())
